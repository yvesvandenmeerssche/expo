version: 2.1

commands:
  install_nix:
    steps:
      - run: curl https://nixos.org/releases/nix/nix-2.1.2/install | bash -s -- --no-daemon
      - run: echo ". ~/.nix-profile/etc/profile.d/nix.sh" >> ~/.bash_profile
  setup:
    steps:
      # ssh: used in circleci checkout steps
      # direnv: used to configure environment with .envrc files
      # rsync: used by expo-module-scripts to copy template files
      - run: nix-env -iA nixpkgs.openssh nixpkgs.direnv nixpkgs.rsync
      - run: mkdir -p ~/.config/direnv
      - run: echo -e "[whitelist]\nprefix = [ \"$HOME\" ]" > ~/.config/direnv/config.toml
      - run: echo 'eval "$(direnv export bash)"' >> ~/.bash_profile
      - run: echo '--frozen-lockfile true' >> ~/.yarnrc
      - checkout
  decrypt_secrets_if_possible:
    steps:
      - run: |
          nix run expo.git-crypt --command bash -c "
            if ! [ -v EXPO_GIT_CRYPT_KEY_BASE64 ]; then
              echo 'git-crypt key not present in environment' && exit 0
            fi
            git crypt unlock <(echo $EXPO_GIT_CRYPT_KEY_BASE64 | base64 --decode)"
  update_submodules:
    steps:
      - run: git submodule update --init
  fetch_cocoapods_specs:
    steps:
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
  restore_yarn_cache:
    parameters:
      working_directory:
        type: string
        default: .
    steps:
      - restore_cache:
          key: yarn-v1-{{ checksum "<< parameters.working_directory >>/yarn.lock" }}
  save_yarn_cache:
    parameters:
      working_directory:
        type: string
        default: .
    steps:
      - save_cache:
          key: yarn-v1-{{ checksum "<< parameters.working_directory >>/yarn.lock" }}
          paths:
            - ~/.cache/yarn  # `yarn cache dir`
  restore_gradle_cache:
    steps:
      - restore_cache:
          key: jars-v1-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
  save_gradle_cache:
    steps:
      - save_cache:
          key: jars-v1-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
          paths:
            - ~/.gradle
  yarn:
    parameters:
      command:
        type: string
        default: install
      working_directory:
        type: string
      max_tries:
        type: integer
        default: 1
    steps:
      - run:
          name: yarn << parameters.command >> (<< parameters.working_directory >>)
          working_directory: << parameters.working_directory >>
          command: for i in {1..<< parameters.max_tries >>}; do ((i > 1)) && sleep 5; nix run expo.yarn -c yarn << parameters.command >> && break; done
  yarn_install:
    parameters:
      working_directory:
        type: string
    steps:
      - yarn:
          command: 'install'
          working_directory: << parameters.working_directory >>
          max_tries: 5

executors:
  # We add -l to all the shell commands to make it easier to use direnv
  nix: &nix
    docker:
      - image: lnl7/nix:latest # only latest includes common utils we want
    # Symlink to the readline-enabled bash which is the default command of the container
    shell: /run/current-system/sw/bin/bash -leo pipefail
    working_directory: ~/expo
  android:
    <<: *nix
    resource_class: xlarge
  js:
    <<: *nix
    resource_class: small
  mac:
    macos: # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: "10.1.0"
    working_directory: /Users/distiller/project
    shell: /bin/bash -leo pipefail
    environment:
      # fastlane complains if these are not set
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8

workflows:
  # JavaScript packages that make up the SDK
  sdk:
    jobs:
      - expo_sdk
      - babel_preset

  # Android and iOS clients
  client:
    jobs:
      - home
      - expotools
      - client_android
      - client_ios
      - test_suite_publish
      - shell_app_sim_base_ios
      - client_android_approve_google_play:
          type: approval
          requires:
            - client_android
          filters:
            branches:
              only:
                - /^sdk-\d+$/
      - client_android_release_google_play:
          requires:
            - client_android_approve_google_play
  #     - shell_app_ios_tests:
  #         requires:
  #           - shell_app_sim_base_ios
  #           - test_suite_publish
  #     - client_android_tests:
  #         requires:
  #           - test_suite_publish
  #     - shell_app_base_android_new # tarball built and uploaded from universe/server/turtle

jobs:
  expo_sdk:
    executor: js
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      # Add back linting once we get ESLint or TSLint set up
      - yarn:
          command: test --maxWorkers 1
          working_directory: ~/expo/packages/expo
      - yarn:
          command: test --maxWorkers 1
          working_directory: ~/expo/packages/expo-font
      - yarn:
          command: test --maxWorkers 1
          working_directory: ~/expo/packages/expo-sensors
      - yarn:
          command: test --maxWorkers 1
          working_directory: ~/expo/packages/expo-sms


  babel_preset:
    executor: js
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: lint --max-warnings 0
          working_directory: ~/expo/packages/babel-preset-expo
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/packages/babel-preset-expo

  home:
    executor: js
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn_install:
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/home

  expotools:
    executor: js
    steps:
      - setup
      - restore_yarn_cache:
          working_directory: ~/expo/tools/expotools
      - yarn_install:
          working_directory: ~/expo/tools/expotools
      - save_yarn_cache:
          working_directory: ~/expo/tools/expotools
      - yarn:
          command: tsc
          working_directory: ~/expo/tools/expotools

  client_ios:
    executor: mac
    steps:
      - install_nix
      - setup
      - update_submodules
      - run: git lfs pull
      - fetch_cocoapods_specs
      - yarn_install:
          working_directory: ~/project/tools-public
      - run: nix run expo.nodejs expo.fastlane -c fastlane ios create_simulator_build
      - store_artifacts:
          path: ~/Library/Logs/fastlane/

  shell_app_sim_base_ios:
    executor: mac
    steps:
      - install_nix
      - setup
      - update_submodules
      - run: git lfs pull
      - fetch_cocoapods_specs
      - yarn_install:
          working_directory: ~/project/tools-public
      - run: nix run expo.nodejs -c ~/project/tools-public/generate-files-ios.js
      - run:
          name: Build ios shell app simulator
          working_directory: ~/project/tools-public
          no_output_timeout: 30m
          command: nix run expo.nodePackages.gulp-cli expo.cocoapods expo.xcpretty expo.expo-cli --command gulp ios-shell-app --action build --type simulator --verbose true --skipRepoUpdate --shellAppSdkVersion UNVERSIONED

  client_android:
    executor: android
    steps:
      - setup
      - yarn_install:
          working_directory: ~/expo # need jsc-android dependency in expokit-npm-package
      - yarn_install:
          working_directory: ~/expo/tools-public
      - restore_gradle_cache
      - decrypt_secrets_if_possible
      - run: echo $ANDROID_KEYSTORE_B64 | base64 -d > android/app/release-key.jks
      - run: |
          nix-shell android/shell.nix --pure \
            --keep ANDROID_KEYSTORE_PASSWORD \
            --keep ANDROID_KEY_ALIAS \
            --keep ANDROID_KEY_PASSWORD \
            --run "fastlane android build build_type:Release"
      - save_gradle_cache
      - save_cache:
          key: client-android-apk-{{ .Revision }}
          paths:
            - ~/expo/android/app/build/outputs/apk
      - store_artifacts:
          path: ~/expo/android/app/build/outputs/apk
      - store_artifacts: # daemon logs for debugging crashes
          path: ~/.gradle/daemon

  client_android_release_google_play:
    executor: js
    steps:
      - setup
      - restore_cache:
          key: client-android-apk-{{ .Revision }}
      - run: echo $ANDROID_KEYSTORE_B64 | base64 -d > android/app/release-key.jks
      - run:
          name: Upload APK to Google Play and release to production
          working_directory: ~/expo
          command: nix run expo.fastlane --command fastlane android prod_release

  test_suite_publish:
    executor: nix
    steps:
      - setup
      - update_submodules
      - decrypt_secrets_if_possible
      - run:
          working_directory: ~/expo/apps/test-suite
          command: ./publish.sh
